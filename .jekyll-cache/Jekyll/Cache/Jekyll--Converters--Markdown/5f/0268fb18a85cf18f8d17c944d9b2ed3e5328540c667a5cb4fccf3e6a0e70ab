I"¯<p>The following is the explanation of a game I wrote uploaded <a href="https://github.com/Tclack88/MorseCodeGame">here</a> to my GitHub.</p>

<p>Non-standard libraries needed:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>readchar      -   pip3 install readchar
termcolor     -   pip3 install termcolor
sox           -   sudo apt install sox
</code></pre></div></div>

<h2 id="background">Background</h2>

<p>I don‚Äôt really know what it was that first drew me to Morse code. I guess I built it up in my head from watching too many movies as this arcane secret language. I tried learning it at two different points in my life, so for whatever arbitrary reason, it has kept returning to my thoughts.</p>

<p>It started with a beep‚Ä¶</p>

<p>I remember I wanted to make my computer beep for some reason that now escapes me. I was probably running some long script and wanted an audio signal to let me know it had finished. So I turned to google. At first I found purely pythonic ways of doing it where you define a sine wave and specify its wavelength and frequency, but that ended up being overly complicated and too many lines long. I just wanted a simple beep. I eventually found a Linux library (Doesn‚Äôt come by default)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>sox
</code></pre></div></div>
<blockquote>
  <p><em>‚ÄúSoX  reads  and  writes  audio  files in most popular formats and can optionally apply effects to them. It can combine multiple input sources, synthesise audio, and,  on  many  systems,  act as a general purpose audio player or a multi-track audio recorder.‚Äù</em></p>
</blockquote>

<p>‚Ä¶and so on according to the man pages. It‚Äôs the quite British ‚Äòsynthesise audio‚Äô feature that we are interested in.</p>

<p>Try out the following command in your terminal</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>play <span class="nt">-nqt</span> alsa synth 1 sin 850
</code></pre></div></div>
<p>-q ‚Äúquiet‚Äù, silences progress which is usually displayed during the build <br />
-n ‚Äúnull‚Äù as in we aren‚Äôt giving an input file 
<br />The rest means we choose alsa (a built in audio driver) synthesize for 1 second a sine wave at 850 hz.</p>

<p>The core definition in the code is <code class="highlighter-rouge">MorsePlay()</code> which will ‚Äúmorsify‚Äù any text, however it comes about (There are lots of games, so many ways to have characters generated). This is done with nested if loops. We have a dictionary that relates the ascii character to the corresponding Morse string then from there call <code class="highlighter-rouge">dot()</code> or <code class="highlighter-rouge">dah()</code> for any . or - symbols. So that‚Äôs it, we are done!</p>

<p>Except we aren‚Äôt! Because there are some more subtleties to be discussed.</p>

<p>Some of the games include playing sets of 5 random letters or grabbing a quote or Wikipedia article and playing it while the listener types what they hear. During my first attempt, the audio would play, but the user couldn‚Äôt type anything in until the full audio had finished, and that can take a while, especially for extra long Wikipedia paragraphs, so I implemented multiprocessing. I also have a learning mode where you hit keys on your keyboard at a whim and it will play them in Morse. I implemented threading for that to smoothen it out, otherwise the characters you hit during the time the Morse audio is playing wouldn‚Äôt get picked up.</p>

<p>On the note of keeping things smooth, I wanted for some game modes, especially the speed runs and the single character translations to just play automatically as the key is pressed; it‚Äôs annoying to have to hit &lt;enter&gt; each time. I could have used the pygame library, but that would have added too many lines of code. Instead I found a wonderful and simple python library called readchar (not a standard one, you must install). Consider using it over pygame for simplicity.</p>

<p>Here is a preview of the game, feel free to try it :D
<img src="/blog/assets/morse/MorseTrainerMenu.png" alt="Morse Code Game Menu" /></p>

<h2 id="extras">Extras</h2>

<p>For absolutely no reason, I wanted to color some of my texts. So I imported termcolor (again not a standard library, sorry). It was my first game, so I was proud of it. I also want
ed to change the screen size when you start (you know, so it‚Äôs obvious that you‚Äôre playing a game‚Ä¶ also to perfectly fit the menu). So if you ever want to change the screen size from terminal and are too lazy to drag it to (or you‚Äôre a Linux nerd who must know these things) try this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">printf</span> <span class="s1">'\e[8;38;80t'</span>
</code></pre></div></div>
<p>It can also be done with a much simpler function <code class="highlighter-rouge">resize -s 38 80</code> which is much simpler syntax but that requires installing a nonstandard library (xterm) and I‚Äôve already done too much of that to you. Besides, this is more esoteric making it that much more awesome!</p>

<h3 id="threading-vs-multiprocessing">Threading vs Multiprocessing</h3>

<p>Some subtleties here: We have threading and multiprocessing, both are used to increase computing power, but what‚Äôs the difference? In short, multiprocessing adds a CPU while threading adds a thread to the same process. So threading uses less system resources and thus is more ‚Äòeconomical‚Äô. It‚Äôs a very difficult subject (for me) to wrap one‚Äôs head around. I just remember opting for threading and it didn‚Äôt go as smoothly when I was trying it for my long paragraphs, so I switched to multiprocessing and it all went well. I‚Äôll continue to use this thumb rule in the future: try threading, if performance sucks, switch to multiprocessing. There‚Äôs something called GIL (Global Interpreter Lock) which limits python‚Äôs ability to thread, particularly with cpython. You can read more about it as well as see some nice graphical comparisons <a href="https://blog.thedataincubator.com/2018/04/python-multi-threading-vs-multi-processing/">here</a>.</p>

<h3 id="easter-egg">Easter Egg</h3>

<p>There is an Easter egg in the game. You might be able to spot it by examining the code and seeing something that well‚Ä¶ just doesn‚Äôt belong contextually. But it‚Äôs more fun to try and spot it by just playing the game, taking care to <em>read everything</em>.</p>

:ET