I"c$<p>I’ve been playing around with flask and creating fairly useless flask apps which may come in handy in the future. Though these apps are small, I have the directory structure set in a way that’s useful for larger apps. The purpose of this post is mainly to keep some notes but also serve as a guide for anyone who stumbles across it. There are <a href="https://www.freecodecamp.org/news/how-to-build-a-web-application-using-flask-and-deploy-it-to-the-cloud-3551c985e492/">plenty of good examples to work from</a> but this is just what I’ve found personally helpful, plus it scales. The only non-standard python dependencies needed are flask.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flask 		-	pip3 install flask
</code></pre></div></div>

<h2 id="steps">STEPS:</h2>
<ol>
  <li>
    <p>make an <code class="highlighter-rouge">__init__.py</code>:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">.app</span> <span class="kn">import</span> <span class="n">create_app</span><span class="p">()</span>

 <span class="n">APP</span> <span class="o">=</span> <span class="n">create_app</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>make an <code class="highlighter-rouge">app.py</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span>  <span class="c1">#etc....
</span> <span class="c1">#(import other supporting functions you may need for your functionality)
</span>
 <span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
    
     <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
    
     <span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
     <span class="k">def</span> <span class="nf">root</span><span class="p">():</span> <span class="c1"># the default page loaded when app starts
</span>         <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'base.html'</span><span class="p">)</span>
    
     <span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/function'</span><span class="p">)</span>
     <span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
         <span class="n">blah</span>
         <span class="n">blah</span>
         <span class="n">arg1</span> <span class="o">=</span> <span class="o">...</span>
         <span class="n">arg2</span> <span class="o">=</span> <span class="o">...</span>
         <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'newpage.html'</span><span class="p">,</span> <span class="n">arg1</span><span class="o">=</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">=</span><span class="n">arg2</span><span class="p">)</span>
    
</code></pre></div>    </div>
  </li>
  <li>
    <p>make a <code class="highlighter-rouge">templates</code> directory and in it the corresponding html
(in the above example, it will be <code class="highlighter-rouge">base.html</code> and <code class="highlighter-rouge">newpage.html</code>)</p>
  </li>
  <li>
    <p>Connect your definitions in “create_app” with the HTML</p>
  </li>
</ol>

<p>Some notes:</p>
<ul>
  <li>pass app.route to a function:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/func'</span><span class="p">)</span> <span class="o">&lt;--</span> <span class="n">refers</span> <span class="n">to</span> <span class="n">the</span> <span class="n">definition</span> <span class="n">about</span> <span class="n">to</span> <span class="n">follow</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
  <span class="n">arg1</span> <span class="o">=</span> <span class="o">...</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'newpage.html'</span><span class="p">,</span> <span class="n">arg1</span><span class="o">=</span><span class="n">arg1</span><span class="p">)</span>
  <span class="p">(</span><span class="n">this</span> <span class="n">allows</span> <span class="n">arg1</span> <span class="n">to</span> <span class="n">be</span> <span class="n">called</span> <span class="ow">in</span> <span class="n">the</span> <span class="sb">`newpage.html`</span>
</code></pre></div>    </div>
  </li>
  <li>def to HTML: in the HTML doc, calling arg1 is as simple as 
  eg:
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;body&gt;</span>
      <span class="nt">&lt;h1&gt;</span> check it out: {{ arg1 }} <span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>HTML to def: in HTML specify ‘name’ field:
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;form&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">'text'</span> <span class="na">name=</span><span class="s">'thing_being_moved'</span> <span class="na">value=</span><span class="s">"unimportant text"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
</code></pre></div>    </div>
    <p>and in the def of “create_app” call it with … get or post:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="o">/</span><span class="n">func</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
  <span class="n">incoming_value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="s">'thing_being_moved'</span><span class="p">]</span>
  <span class="n">more</span>
  <span class="n">stuff</span>
  <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="n">most</span> <span class="n">likely</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="serving-the-app">Serving the app</h3>
<p>So if we put everything in a directory called: <code class="highlighter-rouge">myapp</code> the command for serving this is:
<code class="highlighter-rouge">FLASK_APP=myapp:APP flask run</code></p>

<p>Which is disgusting and kind of hard to remember. The first part is actually just setting an environment variable when you run it. But if you’re on Mac or Linux, you might as well set a temporary (as long as your terminal window is open) environment. We can also set a debug mode so you get feedback, so keeping a little shell script which you can run is an easy fix: <code class="highlighter-rouge">source set_env.sh</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">FLASK_APP</span><span class="o">=</span>morse:APP
<span class="nb">export </span><span class="nv">FLASK_DEBUG</span><span class="o">=</span>1
</code></pre></div></div>

<p>Now it runs with <code class="highlighter-rouge">flask run</code></p>

<h2 id="examples">Examples</h2>

<p>I have two simple examples, based on previous projects. One which translates words into “written Morse code” and one which finds and displays a random Wikipedia paragraph. Click on the images for actual links to see the full examples</p>

<blockquote>
  <p><a href="https://github.com/Tclack88/Flask-Practice/tree/master/wiki_flask"><img src="/blog/assets/flask/random_wiki_screenshot.png" alt="random wiki paragraph" /></a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/Tclack88/Flask-Practice/tree/master/morse_flask"><img src="/blog/assets/flask/morse_translator_screenshot.png" alt="Morse translator" /></a></p>
</blockquote>

<p>Not terribly exciting as presented, but flask has great potential, so getting used to this syntax and creating small apps will become useful in the future</p>
:ET